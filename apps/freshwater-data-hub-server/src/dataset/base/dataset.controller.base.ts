/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DatasetService } from "../dataset.service";
import { DatasetCreateInput } from "./DatasetCreateInput";
import { Dataset } from "./Dataset";
import { DatasetFindManyArgs } from "./DatasetFindManyArgs";
import { DatasetWhereUniqueInput } from "./DatasetWhereUniqueInput";
import { DatasetUpdateInput } from "./DatasetUpdateInput";

export class DatasetControllerBase {
  constructor(protected readonly service: DatasetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dataset })
  async createDataset(
    @common.Body() data: DatasetCreateInput
  ): Promise<Dataset> {
    return await this.service.createDataset({
      data: {
        ...data,

        geography: data.geography
          ? {
              connect: data.geography,
            }
          : undefined,

        metric: data.metric
          ? {
              connect: data.metric,
            }
          : undefined,

        unit: data.unit
          ? {
              connect: data.unit,
            }
          : undefined,
      },
      select: {
        collectedDate: true,
        createdAt: true,
        description: true,

        geography: {
          select: {
            id: true,
          },
        },

        id: true,

        metric: {
          select: {
            id: true,
          },
        },

        name: true,
        source: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dataset] })
  @ApiNestedQuery(DatasetFindManyArgs)
  async datasets(@common.Req() request: Request): Promise<Dataset[]> {
    const args = plainToClass(DatasetFindManyArgs, request.query);
    return this.service.datasets({
      ...args,
      select: {
        collectedDate: true,
        createdAt: true,
        description: true,

        geography: {
          select: {
            id: true,
          },
        },

        id: true,

        metric: {
          select: {
            id: true,
          },
        },

        name: true,
        source: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dataset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataset(
    @common.Param() params: DatasetWhereUniqueInput
  ): Promise<Dataset | null> {
    const result = await this.service.dataset({
      where: params,
      select: {
        collectedDate: true,
        createdAt: true,
        description: true,

        geography: {
          select: {
            id: true,
          },
        },

        id: true,

        metric: {
          select: {
            id: true,
          },
        },

        name: true,
        source: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dataset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataset(
    @common.Param() params: DatasetWhereUniqueInput,
    @common.Body() data: DatasetUpdateInput
  ): Promise<Dataset | null> {
    try {
      return await this.service.updateDataset({
        where: params,
        data: {
          ...data,

          geography: data.geography
            ? {
                connect: data.geography,
              }
            : undefined,

          metric: data.metric
            ? {
                connect: data.metric,
              }
            : undefined,

          unit: data.unit
            ? {
                connect: data.unit,
              }
            : undefined,
        },
        select: {
          collectedDate: true,
          createdAt: true,
          description: true,

          geography: {
            select: {
              id: true,
            },
          },

          id: true,

          metric: {
            select: {
              id: true,
            },
          },

          name: true,
          source: true,

          unit: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dataset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataset(
    @common.Param() params: DatasetWhereUniqueInput
  ): Promise<Dataset | null> {
    try {
      return await this.service.deleteDataset({
        where: params,
        select: {
          collectedDate: true,
          createdAt: true,
          description: true,

          geography: {
            select: {
              id: true,
            },
          },

          id: true,

          metric: {
            select: {
              id: true,
            },
          },

          name: true,
          source: true,

          unit: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
