/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Dataset as PrismaDataset,
  Geography as PrismaGeography,
  Metric as PrismaMetric,
  Unit as PrismaUnit,
} from "@prisma/client";

export class DatasetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DatasetCountArgs, "select">): Promise<number> {
    return this.prisma.dataset.count(args);
  }

  async datasets(args: Prisma.DatasetFindManyArgs): Promise<PrismaDataset[]> {
    return this.prisma.dataset.findMany(args);
  }
  async dataset(
    args: Prisma.DatasetFindUniqueArgs
  ): Promise<PrismaDataset | null> {
    return this.prisma.dataset.findUnique(args);
  }
  async createDataset(args: Prisma.DatasetCreateArgs): Promise<PrismaDataset> {
    return this.prisma.dataset.create(args);
  }
  async updateDataset(args: Prisma.DatasetUpdateArgs): Promise<PrismaDataset> {
    return this.prisma.dataset.update(args);
  }
  async deleteDataset(args: Prisma.DatasetDeleteArgs): Promise<PrismaDataset> {
    return this.prisma.dataset.delete(args);
  }

  async getGeography(parentId: string): Promise<PrismaGeography | null> {
    return this.prisma.dataset
      .findUnique({
        where: { id: parentId },
      })
      .geography();
  }

  async getMetric(parentId: string): Promise<PrismaMetric | null> {
    return this.prisma.dataset
      .findUnique({
        where: { id: parentId },
      })
      .metric();
  }

  async getUnit(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.dataset
      .findUnique({
        where: { id: parentId },
      })
      .unit();
  }
}
