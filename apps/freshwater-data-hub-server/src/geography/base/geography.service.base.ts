/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Geography as PrismaGeography,
  Dataset as PrismaDataset,
} from "@prisma/client";

export class GeographyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GeographyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.geography.count(args);
  }

  async geographies(
    args: Prisma.GeographyFindManyArgs
  ): Promise<PrismaGeography[]> {
    return this.prisma.geography.findMany(args);
  }
  async geography(
    args: Prisma.GeographyFindUniqueArgs
  ): Promise<PrismaGeography | null> {
    return this.prisma.geography.findUnique(args);
  }
  async createGeography(
    args: Prisma.GeographyCreateArgs
  ): Promise<PrismaGeography> {
    return this.prisma.geography.create(args);
  }
  async updateGeography(
    args: Prisma.GeographyUpdateArgs
  ): Promise<PrismaGeography> {
    return this.prisma.geography.update(args);
  }
  async deleteGeography(
    args: Prisma.GeographyDeleteArgs
  ): Promise<PrismaGeography> {
    return this.prisma.geography.delete(args);
  }

  async findDatasets(
    parentId: string,
    args: Prisma.DatasetFindManyArgs
  ): Promise<PrismaDataset[]> {
    return this.prisma.geography
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .datasets(args);
  }
}
