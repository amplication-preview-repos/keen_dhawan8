/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Geography } from "./Geography";
import { GeographyCountArgs } from "./GeographyCountArgs";
import { GeographyFindManyArgs } from "./GeographyFindManyArgs";
import { GeographyFindUniqueArgs } from "./GeographyFindUniqueArgs";
import { CreateGeographyArgs } from "./CreateGeographyArgs";
import { UpdateGeographyArgs } from "./UpdateGeographyArgs";
import { DeleteGeographyArgs } from "./DeleteGeographyArgs";
import { DatasetFindManyArgs } from "../../dataset/base/DatasetFindManyArgs";
import { Dataset } from "../../dataset/base/Dataset";
import { GeographyService } from "../geography.service";
@graphql.Resolver(() => Geography)
export class GeographyResolverBase {
  constructor(protected readonly service: GeographyService) {}

  async _geographiesMeta(
    @graphql.Args() args: GeographyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Geography])
  async geographies(
    @graphql.Args() args: GeographyFindManyArgs
  ): Promise<Geography[]> {
    return this.service.geographies(args);
  }

  @graphql.Query(() => Geography, { nullable: true })
  async geography(
    @graphql.Args() args: GeographyFindUniqueArgs
  ): Promise<Geography | null> {
    const result = await this.service.geography(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Geography)
  async createGeography(
    @graphql.Args() args: CreateGeographyArgs
  ): Promise<Geography> {
    return await this.service.createGeography({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Geography)
  async updateGeography(
    @graphql.Args() args: UpdateGeographyArgs
  ): Promise<Geography | null> {
    try {
      return await this.service.updateGeography({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Geography)
  async deleteGeography(
    @graphql.Args() args: DeleteGeographyArgs
  ): Promise<Geography | null> {
    try {
      return await this.service.deleteGeography(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Dataset], { name: "datasets" })
  async findDatasets(
    @graphql.Parent() parent: Geography,
    @graphql.Args() args: DatasetFindManyArgs
  ): Promise<Dataset[]> {
    const results = await this.service.findDatasets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
