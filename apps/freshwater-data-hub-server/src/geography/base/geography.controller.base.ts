/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GeographyService } from "../geography.service";
import { GeographyCreateInput } from "./GeographyCreateInput";
import { Geography } from "./Geography";
import { GeographyFindManyArgs } from "./GeographyFindManyArgs";
import { GeographyWhereUniqueInput } from "./GeographyWhereUniqueInput";
import { GeographyUpdateInput } from "./GeographyUpdateInput";
import { DatasetFindManyArgs } from "../../dataset/base/DatasetFindManyArgs";
import { Dataset } from "../../dataset/base/Dataset";
import { DatasetWhereUniqueInput } from "../../dataset/base/DatasetWhereUniqueInput";

export class GeographyControllerBase {
  constructor(protected readonly service: GeographyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Geography })
  async createGeography(
    @common.Body() data: GeographyCreateInput
  ): Promise<Geography> {
    return await this.service.createGeography({
      data: data,
      select: {
        coordinates: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Geography] })
  @ApiNestedQuery(GeographyFindManyArgs)
  async geographies(@common.Req() request: Request): Promise<Geography[]> {
    const args = plainToClass(GeographyFindManyArgs, request.query);
    return this.service.geographies({
      ...args,
      select: {
        coordinates: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Geography })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async geography(
    @common.Param() params: GeographyWhereUniqueInput
  ): Promise<Geography | null> {
    const result = await this.service.geography({
      where: params,
      select: {
        coordinates: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Geography })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGeography(
    @common.Param() params: GeographyWhereUniqueInput,
    @common.Body() data: GeographyUpdateInput
  ): Promise<Geography | null> {
    try {
      return await this.service.updateGeography({
        where: params,
        data: data,
        select: {
          coordinates: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Geography })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGeography(
    @common.Param() params: GeographyWhereUniqueInput
  ): Promise<Geography | null> {
    try {
      return await this.service.deleteGeography({
        where: params,
        select: {
          coordinates: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/datasets")
  @ApiNestedQuery(DatasetFindManyArgs)
  async findDatasets(
    @common.Req() request: Request,
    @common.Param() params: GeographyWhereUniqueInput
  ): Promise<Dataset[]> {
    const query = plainToClass(DatasetFindManyArgs, request.query);
    const results = await this.service.findDatasets(params.id, {
      ...query,
      select: {
        collectedDate: true,
        createdAt: true,
        description: true,

        geography: {
          select: {
            id: true,
          },
        },

        id: true,

        metric: {
          select: {
            id: true,
          },
        },

        name: true,
        source: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/datasets")
  async connectDatasets(
    @common.Param() params: GeographyWhereUniqueInput,
    @common.Body() body: DatasetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasets: {
        connect: body,
      },
    };
    await this.service.updateGeography({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/datasets")
  async updateDatasets(
    @common.Param() params: GeographyWhereUniqueInput,
    @common.Body() body: DatasetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasets: {
        set: body,
      },
    };
    await this.service.updateGeography({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/datasets")
  async disconnectDatasets(
    @common.Param() params: GeographyWhereUniqueInput,
    @common.Body() body: DatasetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasets: {
        disconnect: body,
      },
    };
    await this.service.updateGeography({
      where: params,
      data,
      select: { id: true },
    });
  }
}
